From dbcaa309cfd47f6c51dc2ffa628134e3c6529e43 Mon Sep 17 00:00:00 2001
From: Jens Rottmann <Jens.Rottmann@ADLINKtech.com>
Date: Mon, 23 Feb 2015 16:59:40 +0100
Subject: Fix PCIe root port losing config with some devices.

75 ms after setting the PORT_LOGIC_SPEED_CHANGE bit in the
PCIE_LINK_WIDTH_SPEED_CONTROL register the root port's PCI config gets
reset to all 00 (apart from a few r/o values). This effect can be seen even
while polling the regs on a single core. The reason appears to be the i.MX6
resetting its config space whenever an already established link gets lost,
even if only for an instant. These interruptions can happen e.g. with the
PLX PEX8605 PCIe switch after link re-negotiation/training.

As a workaround back up the root port's PCI config, wait for 150 ms (i.e.
twice the time) and then restore the whole thing again. This fixes the
bogus config values seen on the Quad/Dual and the PLX switch not being
detected at all on the LEC-iMX6 Solo.

The same thing can happen rarely on initial link up, during training the
link is not entirely stable, resulting in 1 out of 1000 boots silently
hanging at "Starting kernel ...". The same workaround is applied here.

This is the same thing we had to do after wakeup from suspend in the
previous patch, clearly all this is related. The patch before that also
confirmed that link training with the PLX switch takes 75 ms, so I made sure
the timeout in imx6_pcie_start_link() is at least 2*75 ms, too. It seemed
safer as it also occurs after setting the PORT_LOGIC_SPEED_CHANGE bit. So
does imx6_pcie_wait_for_link(), but that timeout is 200 ms already.

diff --git a/drivers/pci/host/pci-imx6.c b/drivers/pci/host/pci-imx6.c
index 4731d09..e83bc57 100644
--- a/drivers/pci/host/pci-imx6.c
+++ b/drivers/pci/host/pci-imx6.c
@@ -553,6 +553,16 @@ static int imx6_pcie_start_link(struct pcie_port *pp)
 		writel(tmp, pp->dbi_base + PCIE_RC_LCR);
 	}
 
+	/* Appearently the i.MX6 resets its Root Complex PCI config space to all
+	 * 00 if an already established PCIe link is lost again, even if only
+	 * for an instant. This can happen with some devices during the
+	 * following link training and speed change, resulting in 1 out of 1000
+	 * boots silently hanging at "Starting kernel ...". As a workaround we
+	 * save all values and restore them at the end when the link hopefully
+	 * has stabilized. */
+	memcpy_fromio(imx6_pcie->saved_config_space, pp->dbi_base,
+					sizeof(imx6_pcie->saved_config_space));
+
 	/* Start LTSSM. */
 	if (is_imx7d_pcie(imx6_pcie))
 		regmap_update_bits(imx6_pcie->reg_src, 0x2c, BIT(6), BIT(6));
@@ -588,7 +598,7 @@ static int imx6_pcie_start_link(struct pcie_port *pp)
 			dev_err(pp->dev, "Change to gen 2 speed timeout\n");
 			return -EINVAL;
 		}
-		udelay(10);
+		udelay(75);
 	}
 
 	/* Make sure link training is finished as well! */
@@ -600,6 +610,10 @@ static int imx6_pcie_start_link(struct pcie_port *pp)
 	if (ret) {
 		dev_err(pp->dev, "Failed to bring link up!\n");
 	} else {
+		/* Make extra sure everything has settled, then do the restore. */
+		mdelay(150);
+		memcpy_toio(pp->dbi_base, imx6_pcie->saved_config_space,
+					sizeof(imx6_pcie->saved_config_space));
 		tmp = readl(pp->dbi_base + 0x80);
 		dev_dbg(pp->dev, "Link up, Gen=%i\n", (tmp >> 16) & 0xf);
 	}
diff --git a/drivers/pci/host/pcie-designware.c b/drivers/pci/host/pcie-designware.c
index e179a76..2682e5b 100644
--- a/drivers/pci/host/pcie-designware.c
+++ b/drivers/pci/host/pcie-designware.c
@@ -11,6 +11,7 @@
  * published by the Free Software Foundation.
  */
 
+#include <linux/delay.h>
 #include <linux/irq.h>
 #include <linux/irqdomain.h>
 #include <linux/kernel.h>
@@ -371,6 +372,7 @@ int dw_pcie_host_init(struct pcie_port *pp)
 	struct of_pci_range range;
 	struct of_pci_range_parser parser;
 	struct resource *cfg_res;
+	u32 saved_config_space[16];
 	u32 val, na, ns;
 	const __be32 *addrp;
 	int i, index, ret;
@@ -520,10 +522,25 @@ int dw_pcie_host_init(struct pcie_port *pp)
 
 	dw_pcie_wr_own_conf(pp, PCI_BASE_ADDRESS_0, 4, 0);
 
+	memcpy_fromio(saved_config_space, pp->dbi_base, sizeof(saved_config_space));
+
 	dw_pcie_rd_own_conf(pp, PCIE_LINK_WIDTH_SPEED_CONTROL, 4, &val);
 	val |= PORT_LOGIC_SPEED_CHANGE;
 	dw_pcie_wr_own_conf(pp, PCIE_LINK_WIDTH_SPEED_CONTROL, 4, val);
 
+	/* 75 ms after the dw_pcie_wr_own_conf() above the i.MX6's Root Complex
+	 * PCI config space gets reset to all 00 (apart from r/o regs). Tried
+	 * polling with 'nosmp', AFAICT the reset is done by the SoC whenever
+	 * PCIe link is lost, even if only for an instant. Appearently this is
+	 * the case with a PLX PEX8605 switch attached during link
+	 * re-negotiation/training, which takes about 75 ms. As a result on an
+	 * i.MX6 Solo the switch isn't found at all. On a Quad/Dual it is, maybe
+	 * pci_common_init() manages to complete its work in time, but later
+	 * config space still will be wrong. As a workaround we save all values
+	 * and wait until it's hopefully safe to restore them again. */
+	msleep(150);
+	memcpy_toio(pp->dbi_base, saved_config_space, sizeof(saved_config_space));
+
 #ifdef CONFIG_PCI_MSI
 	dw_pcie_msi_chip.dev = pp->dev;
 	dw_pci.msi_ctrl = &dw_pcie_msi_chip;
-- 
2.1.4

