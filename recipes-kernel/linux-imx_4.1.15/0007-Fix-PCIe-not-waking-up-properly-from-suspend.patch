From 720b7514898ccf9758ef62c7bae5143b9e35c2f7 Mon Sep 17 00:00:00 2001
From: Jens Rottmann <Jens.Rottmann@ADLINKtech.com>
Date: Wed, 21 Jan 2015 18:13:16 +0100
Subject: Fix PCIe not waking up properly from suspend.

After suspend to 'mem' (not 'standby', 'freeze') the PEX8605 PCIe switch on
the LEC-iMX6 is not responding, all PCI config regs read 0xFF. Toggling
reset_gpio seems to be the only way to revive it. Also toggling TEST_PD in
GPR1 is reported to work around "ERR005723: PCIe does not support L2 power
down", though I'm unsure if this is relevant for suspend. Both is
accomplished by calling imx6_pcie_[de]assert_core_reset().

Because imx6_pcie_assert_core_reset() will now (opposing to kernel 3.10)
reset the PCIe controller we can also restructure to share the
shutdown/re-init code with later i.MX models.

Also 50-80 ms after wakeup from 'mem' or 'standby' the i.MX6 root port's
PCI config gets lost (mostly 0x00). The reason is a temporary link loss,
probably due to link re-training, which triggers the i.MX6 to reset the
first 64 bytes of its config space. We wait until after it happens and
restore them.

diff --git a/drivers/pci/host/pci-imx6.c b/drivers/pci/host/pci-imx6.c
index b0682d0..4731d09 100644
--- a/drivers/pci/host/pci-imx6.c
+++ b/drivers/pci/host/pci-imx6.c
@@ -59,6 +59,7 @@ struct imx6_pcie {
 	struct regmap		*reg_src;
 	void __iomem		*mem_base;
 	struct regulator	*pcie_phy_regulator;
+	u32			saved_config_space[16];
 };
 
 /* PCIe Root Complex registers (memory-mapped) */
@@ -981,106 +982,103 @@ static int pci_imx_suspend_noirq(struct device *dev)
 
 	if (IS_ENABLED(CONFIG_PCI_MSI))
 		dw_pcie_msi_cfg_store(pp);
+	memcpy_fromio(imx6_pcie->saved_config_space, pp->dbi_base,
+				sizeof(imx6_pcie->saved_config_space));
 
-	pci_imx_pm_turn_off(imx6_pcie);
-
-	if (is_imx6sx_pcie(imx6_pcie) || is_imx7d_pcie(imx6_pcie)
-			|| is_imx6qp_pcie(imx6_pcie)) {
-		/* Disable clks */
-		clk_disable_unprepare(imx6_pcie->pcie);
-		clk_disable_unprepare(imx6_pcie->pcie_phy);
-		clk_disable_unprepare(imx6_pcie->pcie_bus);
-		if (is_imx6sx_pcie(imx6_pcie))
-			clk_disable_unprepare(imx6_pcie->pcie_inbound_axi);
-		else if (is_imx7d_pcie(imx6_pcie))
-			/* turn off external osc input */
-			regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR12,
-					BIT(5), BIT(5));
-		else if (is_imx6qp_pcie(imx6_pcie)) {
-			regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR1,
-					IMX6Q_GPR1_PCIE_REF_CLK_EN, 0);
-			regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR1,
-					IMX6Q_GPR1_PCIE_TEST_PD,
-					IMX6Q_GPR1_PCIE_TEST_PD);
-		}
-		release_bus_freq(BUS_FREQ_HIGH);
-
-		/* Power down PCIe PHY. */
-		if (imx6_pcie->pcie_phy_regulator != NULL)
-			regulator_disable(imx6_pcie->pcie_phy_regulator);
-		if (gpio_is_valid(imx6_pcie->power_on_gpio))
-			gpio_set_value_cansleep(imx6_pcie->power_on_gpio, 0);
-	} else {
+	if (!is_imx6sx_pcie(imx6_pcie) && !is_imx7d_pcie(imx6_pcie)
+					&& !is_imx6qp_pcie(imx6_pcie)) {
 		/*
 		 * L2 can exit by 'reset' or Inband beacon (from remote EP)
 		 * toggling phy_powerdown has same effect as 'inband beacon'
 		 * So, toggle bit18 of GPR1, used as a workaround of errata
 		 * "PCIe PCIe does not support L2 Power Down"
 		 */
+		imx6_pcie_assert_core_reset(pp);
+	}
+
+	pci_imx_pm_turn_off(imx6_pcie);
+
+	/* Disable clks */
+	clk_disable_unprepare(imx6_pcie->pcie);
+	clk_disable_unprepare(imx6_pcie->pcie_phy);
+	clk_disable_unprepare(imx6_pcie->pcie_bus);
+	if (is_imx6sx_pcie(imx6_pcie))
+		clk_disable_unprepare(imx6_pcie->pcie_inbound_axi);
+	else if (is_imx7d_pcie(imx6_pcie))
+		/* turn off external osc input */
+		regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR12,
+				BIT(5), BIT(5));
+	else if (is_imx6qp_pcie(imx6_pcie)) {
+		regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR1,
+				IMX6Q_GPR1_PCIE_REF_CLK_EN, 0);
 		regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR1,
 				IMX6Q_GPR1_PCIE_TEST_PD,
 				IMX6Q_GPR1_PCIE_TEST_PD);
 	}
+	release_bus_freq(BUS_FREQ_HIGH);
+
+	/* Power down PCIe PHY. */
+	if (imx6_pcie->pcie_phy_regulator != NULL)
+		regulator_disable(imx6_pcie->pcie_phy_regulator);
+	if (gpio_is_valid(imx6_pcie->power_on_gpio))
+		gpio_set_value_cansleep(imx6_pcie->power_on_gpio, 0);
 
 	return 0;
 }
 
 static int pci_imx_resume_noirq(struct device *dev)
 {
-	int ret = 0;
+	int ret;
 	struct imx6_pcie *imx6_pcie = dev_get_drvdata(dev);
 	struct pcie_port *pp = &imx6_pcie->pp;
 
-	if (is_imx6sx_pcie(imx6_pcie) || is_imx7d_pcie(imx6_pcie)
-			|| is_imx6qp_pcie(imx6_pcie)) {
-		if (is_imx7d_pcie(imx6_pcie))
-			regmap_update_bits(imx6_pcie->reg_src, 0x2c, BIT(6), 0);
-		else
-			regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR12,
-					IMX6Q_GPR12_PCIE_CTL_2, 0);
-
-		imx6_pcie_assert_core_reset(pp);
+	if (is_imx7d_pcie(imx6_pcie))
+		regmap_update_bits(imx6_pcie->reg_src, 0x2c, BIT(6), 0);
+	else
+		regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR12,
+				IMX6Q_GPR12_PCIE_CTL_2, 0);
 
-		imx6_pcie_init_phy(pp);
+	imx6_pcie_assert_core_reset(pp);
 
-		ret = imx6_pcie_deassert_core_reset(pp);
-		if (ret < 0)
-			return ret;
+	imx6_pcie_init_phy(pp);
 
-		/*
-		 * controller maybe turn off, re-configure again
-		 */
-		dw_pcie_setup_rc(pp);
+	ret = imx6_pcie_deassert_core_reset(pp);
+	if (ret < 0)
+		return ret;
 
-		if (IS_ENABLED(CONFIG_PCI_MSI))
-			dw_pcie_msi_cfg_restore(pp);
+	/*
+	 * controller maybe turn off, re-configure again
+	 */
+	dw_pcie_setup_rc(pp);
 
-		if (is_imx7d_pcie(imx6_pcie)) {
-			/* wait for phy pll lock firstly. */
-			pci_imx_phy_pll_locked(imx6_pcie);
-			regmap_update_bits(imx6_pcie->reg_src, 0x2c,
-					BIT(6), BIT(6));
-		} else {
-			regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR12,
-					IMX6Q_GPR12_PCIE_CTL_2,
-					IMX6Q_GPR12_PCIE_CTL_2);
-		}
+	if (IS_ENABLED(CONFIG_PCI_MSI))
+		dw_pcie_msi_cfg_restore(pp);
 
-		ret = imx6_pcie_start_link(pp);
-		if (ret < 0)
-			pr_info("pcie link is down after resume.\n");
+	if (is_imx7d_pcie(imx6_pcie)) {
+		/* wait for phy pll lock firstly. */
+		pci_imx_phy_pll_locked(imx6_pcie);
+		regmap_update_bits(imx6_pcie->reg_src, 0x2c,
+				BIT(6), BIT(6));
 	} else {
-		/*
-		 * L2 can exit by 'reset' or Inband beacon (from remote EP)
-		 * toggling phy_powerdown has same effect as 'inband beacon'
-		 * So, toggle bit18 of GPR1, used as a workaround of errata
-		 * "PCIe PCIe does not support L2 Power Down"
-		 */
-		regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR1,
-				IMX6Q_GPR1_PCIE_TEST_PD, 0);
+		regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR12,
+				IMX6Q_GPR12_PCIE_CTL_2,
+				IMX6Q_GPR12_PCIE_CTL_2);
 	}
 
-	return 0;
+	ret = imx6_pcie_start_link(pp);
+	if (ret < 0)
+		pr_info("pcie link is down after resume.\n");
+
+	/* Appearently the i.MX6 resets its Root Complex PCI config
+	 * space to all 00 if an already established PCIe link is lost
+	 * again, even if only for an instant. This happens 50-80 ms
+	 * after wakeup, maybe due to link re-training. We'll wait and
+	 * restore the values afterwards. */
+	mdelay(150); /* be extra sure */
+	memcpy_toio(pp->dbi_base, imx6_pcie->saved_config_space,
+				sizeof(imx6_pcie->saved_config_space));
+
+	return ret;
 }
 
 static const struct dev_pm_ops pci_imx_pm_ops = {
-- 
2.1.4

